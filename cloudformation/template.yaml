AWSTemplateFormatVersion: 2010-09-09
Parameters:
  S3Bucket:
    Description: S3 Source Bucket
    Type: String
    AllowedPattern: ^[a-zA-Z0-9-]*$
Resources:
  StepFunctionsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      ManagedPolicyName: ClarifyStepFunctionsPolicy
      PolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'iam:PassRole'
            Resource: !Join [ '', [ 'arn:aws:iam::', !Ref 'AWS::AccountId', ':role/*' ] ]
            Condition:
              StringEquals:
                'iam:PassedToService': sagemaker.amazonaws.com
          - Effect: Allow
            Action:
              - 'sagemaker:CreateModel'
              - 'sagemaker:DeleteEndpointConfig'
              - 'sagemaker:DescribeTrainingJob'
              - 'sagemaker:CreateEndpoint'
              - 'sagemaker:StopTrainingJob'
              - 'sagemaker:CreateTrainingJob'
              - 'sagemaker:UpdateEndpoint'
              - 'sagemaker:CreateEndpointConfig'
              - 'sagemaker:DeleteEndpoint'
              - 'sagemaker:CreateTransformJob'
              - 'sagemaker:CreateProcessingJob'
            Resource: 'arn:aws:sagemaker:*:*:*'
          - Effect: Allow
            Action:
              - 'events:DescribeRule'
              - 'events:PutRule'
              - 'events:PutTargets'
            Resource: 'arn:aws:events:*:*:rule/*'
          - Effect: Allow
            Action: 'lambda:InvokeFunction'
            Resource:
              - 'arn:aws:lambda:*:*:function:*'
          - Effect: Allow
            Action:
              - 'glue:StartJobRun'
              - 'glue:GetJobRun'
              - 'glue:BatchStopJobRun'
              - 'glue:GetJobRuns'
            Resource: 'arn:aws:glue:*:*:job/*'
  SagemakerPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: AmazonSageMakerClarifyPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:GetObject'
              - 'iam:PassRole'
              - 'kms:Decrypt'
              - 'kms:Encrypt'
              - 'kms:DescribeKey'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
            Resource:
              - !Join [ ':', [ 'arn:aws:kms', !Ref 'AWS::Region', !Ref 'AWS::AccountId', 'key/*' ] ]
              - !Join [ ':', [ 'arn:aws:iam:', !Ref 'AWS::AccountId', 'role/*' ] ]
          - Effect: Allow
            Action:
              - 'lambda:CreateFunction'
              - 'lambda:TagResource'
              - 'lambda:DeleteProvisionedConcurrencyConfig'
              - 'lambda:DeleteFunction'
              - 'lambda:UpdateFunctionEventInvokeConfig'
              - 'lambda:InvokeFunction'
              - 'lambda:UpdateAlias'
              - 'lambda:UpdateFunctionCode'
              - 'lambda:PutProvisionedConcurrencyConfig'
              - 'lambda:PublishVersion'
              - 'lambda:DeleteEventSourceMapping'
              - 'lambda:CreateAlias'
              - 'lambda:PublishLayerVersion'
              - 'lambda:InvokeAsync'
              - 'lambda:CreateEventSourceMapping'
              - 'lambda:UntagResource'
              - 'lambda:PutFunctionConcurrency'
              - 'lambda:DeleteLayerVersion'
              - 'lambda:PutFunctionEventInvokeConfig'
              - 'lambda:DeleteFunctionEventInvokeConfig'
              - 'lambda:UpdateEventSourceMapping'
              - 'lambda:UpdateFunctionConfiguration'
              - 'lambda:DeleteAlias'
              - 'lambda:DeleteFunctionConcurrency'
            Resource:
              - !Join [ ':', [ 'arn:aws:lambda', !Ref 'AWS::Region', !Ref 'AWS::AccountId', '*' ] ]
          - Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:DeleteObject'
              - 's3:ListBucket'
            Resource:
              - !Join [ '', [ 'arn:aws:s3:::*', !Ref S3Bucket, "*" ] ]
              - !Join [ '', [ 'arn:aws:s3:::*', !Ref S3Bucket, "*/*" ] ]
          - Effect: Allow
            Action:
              - 'glue:BatchCreatePartition'
              - 'glue:CreateClassifier'
              - 'glue:UpdateTable'
              - 'glue:DeleteTable'
              - 'glue:DeleteWorkflow'
              - 'glue:UpdateCrawler'
              - 'glue:UpdateWorkflow'
              - 'glue:CreateScript'
              - 'glue:UpdateTrigger'
              - 'glue:StartWorkflowRun'
              - 'glue:StopCrawlerSchedule'
              - 'glue:PutResourcePolicy'
              - 'glue:UpdateDatabase'
              - 'glue:CreateTable'
              - 'glue:DeleteResourcePolicy'
              - 'glue:DeleteCrawler'
              - 'glue:BatchStopJobRun'
              - 'glue:DeleteUserDefinedFunction'
              - 'glue:CreateConnection'
              - 'glue:CreateCrawler'
              - 'glue:DeleteSecurityConfiguration'
              - 'glue:GetMapping'
              - 'glue:DeleteConnection'
              - 'glue:UseMLTransforms'
              - 'glue:BatchDeleteConnection'
              - 'glue:StartCrawlerSchedule'
              - 'glue:StartJobRun'
              - 'glue:BatchDeleteTable'
              - 'glue:UpdateMLTransform'
              - 'glue:UpdateClassifier'
              - 'glue:CreateWorkflow'
              - 'glue:DeletePartition'
              - 'glue:CreateMLTransform'
              - 'glue:CreateSecurityConfiguration'
              - 'glue:PutWorkflowRunProperties'
              - 'glue:DeleteDatabase'
              - 'glue:StartMLEvaluationTaskRun'
              - 'glue:CreateTrigger'
              - 'glue:BatchDeletePartition'
              - 'glue:StopTrigger'
              - 'glue:CreateUserDefinedFunction'
              - 'glue:StopCrawler'
              - 'glue:DeleteJob'
              - 'glue:StartTrigger'
              - 'glue:DeleteDevEndpoint'
              - 'glue:DeleteMLTransform'
              - 'glue:CreateJob'
              - 'glue:ImportCatalogToGlue'
              - 'glue:PutDataCatalogEncryptionSettings'
              - 'glue:StartCrawler'
              - 'glue:ResetJobBookmark'
              - 'glue:UpdateJob'
              - 'glue:CreatePartition'
              - 'glue:UpdatePartition'
              - 'glue:StartImportLabelsTaskRun'
              - 'glue:DeleteClassifier'
              - 'glue:StartExportLabelsTaskRun'
              - 'glue:UpdateUserDefinedFunction'
              - 'glue:CancelMLTaskRun'
              - 'glue:StartMLLabelingSetGenerationTaskRun'
              - 'glue:UpdateCrawlerSchedule'
              - 'glue:UpdateConnection'
              - 'glue:CreateDatabase'
              - 'glue:CreateDevEndpoint'
              - 'glue:UpdateDevEndpoint'
              - 'glue:DeleteTrigger'
            Resource:
               - !Join [ ':', [ 'arn:aws:glue', !Ref 'AWS::Region', !Ref 'AWS::AccountId', '*' ] ]
  LambdaEventPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: ClarifyLambdaEventPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - s3:PutObject
            Resource:
              - !Join [ ':', [ 'arn:aws:logs', !Ref 'AWS::Region', !Ref 'AWS::AccountId', '*' ] ]
              - !Join [ '', [ 'arn:aws:s3:::', !Ref S3Bucket, '/*' ] ]
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Join ['', [ 'arn:aws:logs:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':log-group:/aws/lambda/*:*' ] ]
  StepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: sagemaker-clarify-demo-StepFunctionsRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref StepFunctionsPolicy
  SagemakerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: sagemaker.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
        - !Ref SagemakerPolicy
  LambdaEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Ref LambdaEventPolicy
  CFNSagemakerNotebook:
    Type: AWS::SageMaker::NotebookInstance
    Properties:
      DirectInternetAccess: Enabled
      InstanceType: ml.t2.medium
      NotebookInstanceName: sagemaker-clarify-stepfunctions-demo
      RoleArn: !GetAtt SagemakerRole.Arn
      RootAccess: Enabled
      VolumeSizeInGB: 10
  WriteConfig:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: sagemaker-clarify-write-config
      Environment:
        Variables:
          BUCKET: !Ref S3Bucket
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          from io import StringIO

          # Pull ressources
          client = boto3.client("s3") #low-level functional API

          def write_clarify_config(event, context):
              """Lambda function.

              This function will query the data that triggered the event (transformed data),
              then runs this data against the prediction endpoint and returns the prediction.

              Args:
                  event (dict): A dict sent from the trigger.
                  context (dict): A dict.

              Returns:
                  dict: dict.
              """
              print(event)
              bucket = event["bucket"]
              config = {
                "dataset_type": "text/csv",
                "headers": event["header"],
                "label": event["label"],
                "methods": {
                  "shap": {
                    "baseline": "s3://{}/{}/baseline.csv".format(bucket, event["data_prefix"]),
                    "num_samples": 20,
                    "agg_method": "mean_abs",
                    "use_logit": False,
                    "save_local_shap_values": True
                  },
                  "report": {
                    "name": "report",
                    "title": "Analysis Report"
                  }
                },
                "predictor": {
                  "model_name": event["model_name"],
                  "instance_type": "ml.m5.xlarge",
                  "initial_instance_count": 1,
                  "accept_type": "text/csv",
                  "content_type": "text/csv"
                }
              }
              clarify_config_file = "{}/analysis_config.json".format(event["clarify_config_prefix"])
              # Write JSON to Amazon S3:
              response = client.put_object(
                  Body=json.dumps(config),
                  Bucket=bucket,
                  Key=clarify_config_file
              )
              # Return prediction on success!
              return {
                  "statusCode": 200,
                  "body": json.dumps("Job successful!")
              }
      Timeout: 20
      Handler: index.write_clarify_config
      Runtime: python3.8
      MemorySize: 512
      ReservedConcurrentExecutions: 1
      Role: !GetAtt LambdaEventRole.Arn